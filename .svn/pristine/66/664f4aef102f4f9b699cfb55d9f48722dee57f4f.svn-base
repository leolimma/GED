/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.goku.controller;

import br.com.goku.util.CategoriaArvore;
import br.com.goku.model.Categoria;
import br.com.goku.model.Documento;
import br.com.goku.model.Tipologia;
import br.com.goku.persistence.*;
import br.com.goku.util.ContextoUtil;
import br.com.goku.util.FileUpload;
import br.com.goku.util.JsfUtil;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.Date;
import javax.enterprise.context.RequestScoped;
import javax.faces.event.ValueChangeEvent;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.NodeSelectEvent;
import org.primefaces.model.TreeNode;

/**
 *
 * @author Alan
 */
@Named(value = "documentoController")
@ViewScoped
public class DocumentoController implements Serializable {

    private static final long serialVersionUID = 7117316198889763545L;

    private Documento documento = new Documento();
    private TreeNode categoriasTree;
    private Categoria categoriaSelecionada;
    private Tipologia tipologiaSelecionada;
    private String namoDocumento;
    private String tamanhoDocumento;
    private String formatoDocumento;
    private boolean habilitaBotao = true;

    private final Dao documentoDAO;
    private final Dao categoriaDAO;
    private final Dao tipologiaDAO;

    private InputStream arquivo;

    @Inject
    private ContextoController contexto;

    public DocumentoController() {
        this.habilitaBotao = false;
        this.documento = new Documento();
        this.documentoDAO = new Dao(Documento.class);
        this.categoriaDAO = new Dao(Categoria.class);
        this.tipologiaDAO = new Dao(Tipologia.class);
    }

    public TreeNode getCategoriasTree() {
        return CategoriaArvore.getCategoriasTree(categoriaDAO.findAll());
    }

    public void selecionar(NodeSelectEvent event) {
        this.categoriaSelecionada = (Categoria) event.getTreeNode().getData();
        this.documento.setCategoria(this.categoriaSelecionada);
        this.categoriasTree = null;
    }

    public void salvar() {

        if (this.tipologiaSelecionada == null) {
            JsfUtil.addErrorMessage("É necessário informar uma tipologia");
            return;
        }

        if (this.documento.getCategoria() == null) {
            JsfUtil.addErrorMessage("É necessário informar uma categoria");
            return;
        }

        this.documento.setTipologia(this.tipologiaSelecionada);
        this.documento.setNome(this.namoDocumento);
        this.documento.setTamanho(this.tamanhoDocumento);
        this.documento.setFormato(this.formatoDocumento);
        this.documento.setUsuario(contexto.getUsuarioLogado());
        this.documento.setDataArquivo(new Date());
        this.documento = (Documento) documentoDAO.edit(this.documento);

        FileUpload fileUpload = new FileUpload();
        boolean salvou = fileUpload.salvarArquivo(documento.getCodigo().toString() + ".pdf", arquivo);
        if (salvou) {
            JsfUtil.addSuccessMessage("Arquivo '" + namoDocumento + "' salvo com sucesso!");
        } else {
            JsfUtil.addErrorMessage("Arquivo '" + namoDocumento + "' não foi salvo!");
        }

    }

    public void setTipologia(ValueChangeEvent event) {
        String teste = event.getNewValue().toString();
        Integer tipologia = Integer.valueOf(teste);
        this.tipologiaSelecionada = (Tipologia) tipologiaDAO.findById(tipologia);
    }

    public void upload(FileUploadEvent event) throws IOException {
        this.arquivo = event.getFile().getInputstream();
        this.namoDocumento = (event.getFile().getFileName());
        this.tamanhoDocumento = (String.valueOf(event.getFile().getSize()));
        this.formatoDocumento = (event.getFile().getContentType());
        this.habilitaBotao = false;
    }

    public Documento getDocumento() {
        return documento;
    }

    public void setDocumento(Documento documento) {
        this.documento = documento;
    }

    public Categoria getCategoriaSelecionada() {
        return categoriaSelecionada;
    }

    public void setCategoriaSelecionada(Categoria categoria) {
        this.categoriaSelecionada = categoria;
    }

    public Tipologia getTipologiaSelecionada() {
        return tipologiaSelecionada;
    }

    public void setTipologiaSelecionada(Tipologia tipologiaSelecionada) {
        this.tipologiaSelecionada = tipologiaSelecionada;
    }

    public boolean isHabilitaBotao() {
        return habilitaBotao;
    }

    public void setHabilitaBotao(boolean habilitaBotao) {
        this.habilitaBotao = habilitaBotao;
    }

}
